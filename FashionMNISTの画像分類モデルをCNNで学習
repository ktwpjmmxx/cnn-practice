import torch
from torch import nn, optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# 1. 前処理
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,),(0.5,))
])

# 2. データセットとデータローダー
train_dataset = datasets.FashionMNIST(root='./data', train=True, transform=transform, download=True)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# 3. CNNモデルの定義
class FashionCNN(nn.Module):
    def __init__(self):
        super(FashionCNN, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=1,out_channels=16,kernel_size=3)
        self.relu1 = nn.ReLU()
        self.conv2 = nn.Conv2d(in_channels=16,out_channels=32,kernel_size=3)
        self.relu2 = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(4608,64)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(64,10)

    def forward(self, x):
        # TODO: 順伝播の記述
        return x

model = FashionCNN()

# 4. 損失関数とOptimizer
# TODO: 定義する

# 5. 学習ループ（1エポック）
# TODO: 学習処理（順伝播→損失→逆伝播→更新）
